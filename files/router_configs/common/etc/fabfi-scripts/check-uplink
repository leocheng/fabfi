#!/bin/sh 
NETFILE=/var/state/network
NETTMP=/tmp/net.tmp
IFACE=`uci get network.wan.ifname`
IFACER=`echo $IFACE | sed 's/\./\\\./'`
# not used.  I threw it in as a magic number below IFACE=eth0\.1  #is a regex
OLSRD=/etc/init.d/olsrd
LG=/var/etc/check-uplink.log
#be careful not to set sleeptime too low, because you need to wait for lots of other processes to settle
SLEEPTIME=45
RTCHECK_INTERVAL=2

watchloop_and_exit() {
	TIMER=0
	echo "`date` Entering watchloop" >> $LG
	while [ $TIMER -lt $SLEEPTIME ]
        	do
        	TIMER=`expr $TIMER + $RTCHECK_INTERVAL`
		NEWDEFIFACE=`route -n | grep -m1 -e "^0\.0\.0\.0 .*" | sed 's/^0\.0\.0\.0.* \([a-zA-Z0-9\.]*\)$/\1/'`
		if [ ! "$CU_DEFIFACE" = "$NEWDEFIFACE" ]
			then
			echo "`date` Physical interface [${CU_DEFIFACE}] changed to [${NEWDEFIFACE}], bumping chilli" >> $LG

			export CU_DEFIFACE=$NEWDEFIFACE
			/etc/init.d/chilli restart
			do_main
		fi
		sleep $RTCHECK_INTERVAL
	done
	echo "`date` Exiting and respawning" >> $LG
	echo "" >> $LG
	exec sh /etc/fabfi-scripts/check-uplink &
	exit 0
}

get_pl_index() {
	echo `uci show olsrd | grep 'olsrd\.@LoadPlugin\[.*\]\.library=olsrd_nameservice\.so' |
	  sed 's/olsrd\.@LoadPlugin\[\(.*\)\]\.library=olsrd_nameservice\.so.*/\1/'`
}

get_name() {
echo "`date` getting name" >> $LG
	myvar1=`get_pl_index`
	echo `uci get olsrd.@LoadPlugin[${myvar1}].dns_server`
}

get_meshIP() {
echo "`date` getting meshIP, prefer: wired, wireless, adhoc" >> $LG
        if [ `uci get network.mesh` ]; then                             
echo "`date` getting meshIP" >> $LG                                     
                echo `uci get network.mesh.ipaddr`                      
        else if  [ `uci get network.wifimesh` ]; then                   
echo "`date` getting wifimeshIP" >> $LG                                 
                echo `uci get network.wifimesh.ipaddr`                  
        else if  [ `uci get network.adhocmesh` ]; then                  
echo "`date` getting adhocmeshIP" >> $LG                                
                echo `uci get network.adhocmesh.ipaddr`                 
        fi                                                              
        fi                                                              
        fi
}

set_name() {
echo "`date` setting name" >> $LG
	myvar2=`get_pl_index`
        if [ `uci get network.mesh` ]; then                             
                myvar5=`uci get network.mesh.ipaddr`                    
        else if  [ `uci get network.wifimesh` ]; then                   
                myvar5=`uci get network.wifimesh.ipaddr`                
        else if  [ `uci get network.adhocmesh` ]; then                  
                myvar5=`uci get network.adhocmesh.ipaddr`               
        fi                                                              
        fi                                                              
        fi 
	myvar7=`uci set olsrd.@LoadPlugin[${myvar2}].dns_server=$myvar5`
	uci commit
	echo $myvar7
}

clear_name() {
echo "`date` clearing name" >> $LG
	myvar3=`get_pl_index`
	uci delete olsrd.@LoadPlugin[${myvar3}].dns_server
	uci commit
}

set_server() {
	myvar4=`get_name`
	echo $myvar4
echo "`date` dns is [$myvar4] (blank if not set in nameservice)" >> $LG
    if (test "" = "$myvar4")                                       
        then                                                   
echo "`date` setting server and restarting" >> $LG                     
        $OLSRD stop                                            
        sleep 2                                                
        set_name                                               
        $OLSRD start                                           
    else                                                           
        if (test "$myvar4" = `get_meshIP`)
            then                      
echo "`date` server already set" >> $LG           
        else                              
echo "`date` updating server and restarting" >> $LG
            $OLSRD stop                
            sleep 2                    
            set_name                   
            $OLSRD start               
        fi                                 
    fi 	
    watchloop_and_exit	
}

clear_server() {
	myvar6=`get_name`
	if !(test "" = 	"$myvar6")
		then
echo "`date` clearing server and restarting" >> $LG
		$OLSRD stop
		sleep 2
		clear_name
		$OLSRD start
	else
echo "`date` server already cleared" >> $LG		
	fi	
	watchloop_and_exit	
}

do_main() {
if [ `uci get wireless.radio0.disabled` == 0 ] && [ `uci get wireless.@wifi-iface[0].network` == "wan" ]
        then                                                                                            
                                                                                                        
        echo "`date` wan is wireless." >> $LG                                                           
                                                                                                        
        IFACE="wlan0"                                                                                   
        IFACER=`echo $IFACE | sed 's/\./\\\./'`                                                         
                                                                                                        
        if iwconfig wlan0 | grep -c "Not-Associated"                                                    
                then                                                                                    
                                                                                                        
                echo "`date` wireless wan is not associated. Searching for SSID" >> $LG                 
                                                                                                        
                # Note, this procedure assumes you're only using wifi for one thing.  otherwise it'll make a mess
                str="^0\.0\.0\.0 .*${IFACER}\$"                                                                  
                if iw dev wlan0 scan dump | grep -c "SSID: `uci get wireless.@wifi-iface[0].ssid`"               
                        then                                                                                     
                                                                                                                 
                        echo "`date` got SSID, bumping wifi" >> $LG                                              
                                                                                                                 
                        wifi                                                                                     
                        sleep 5                                                                                  
                fi                                                                                               
                if iwconfig wlan0 | grep -c "Not-Associated"                                                     
                        then                                                                                     
                        if route -n | grep -ce "$str"                                                            
                                then                                                                             
                                route del default $IFACE                                                  
                        fi                                                                                       
                        clear_server                                                                             
                        #exit 0                                                                                   
                fi                                                                                      
        fi                                                                                                       
fi 

# check if the device thinks the WAN interface is enabled
# this will fail on no ether for DHCPed setups or no-connect on timed-out wifi connect fail
# static ifaces will pass
if cat $NETFILE | grep -c "network.wan.up=1"
	then

	echo "`date` iface is configured" >> $LG	

	# Find the configured WAN gateway IP
	# this will grab for DHCP or static GW
	uci show network > $NETTMP
	GW=`cat $NETFILE $NETTMP | grep -m 1 -e "network.wan.gateway=.*" | sed 's/network.wan.gateway=\(.*\)/\1/'`
	
	# get UCI index for OLSRD dyn_gw plugin
	pl_gw_index=`uci show olsrd | grep -e 'olsrd\.@LoadPlugin\[.*\]\.library=olsrd_dyn_gw\.so' |
	  sed 's/olsrd\.@LoadPlugin\[\(.*\)\]\.library=olsrd_dyn_gw\.so.*/\1/'`
	rm $NETTMP

	#Get Master IP.  This should succeed only if this device is a headnode
	master_ip=`uci show dhcp | grep -A1 master.mesh | grep ".ip=" | sed 's/.*ip=\(.*\)/\1/'`

	google_ip=`nslookup google.com | grep "Address 1:" | grep -v localhost | sed 's/.* \([0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\) .*/\1/'`
	
	# Check if the default route is on the WAN interface	
	str="^0\.0\.0\.0 .*${IFACER}\$"
	if route -n | grep -ce "$str" 
		then

		echo "`date` wan is listed as a default route" >> $LG

		if !(test "" = "$master_ip")
			then

			echo "`date` this is a headnode" >> $LG

			#note: policy routing in this script assumes iproute2, with this rule:
			#ip rule add iif lo table fabfi
			#and an entry for a table called "fabfi" at location that is evaluated first in /etc/iproute2/rt_tables
			#This script assumes that master.mesh is ALWAYS outside the network on the public internet
			ip route add $master_ip via $GW dev $IFACE table fabfi
			wget -s http://master.mesh
			if [ $? -eq 0 ]
				then
				ip route del $master_ip via $GW dev $IFACE table fabfi

				echo "`date` w-got master.mesh" >> $LG
				
				set_server
				#exit 0
			fi
			ip route del $master_ip via $GW dev $IFACE table fabfi

			echo "`date` failed to w-get master.mesh, checking ping in case of bad cloud server" >> $LG

		else
			if !(test "" = "$google_ip")
				then
	
				ip route add $google_ip via $GW dev $IFACE table fabfi
				wget -s http://${google_ip}
				if [ $? -eq 0 ]
					then
					ip route del $google_ip via $GW dev $IFACE table fabfi

					echo "`date` w-got google.com, but we're not a headnode" >> $LG

					clear_server
					#exit 0
				fi
				ip route del $google_ip via $GW dev $IFACE table fabfi
			fi

			echo "`date` failed to w-get google.com, checking ping in case of bad DNS" >> $LG

		fi

		# Check if dyn_gw IPs respond on the WAN by manually adding a route for them that way
		# This could be buggy in the case of only one dyn_gw IP?
		for ping_ip in `uci get olsrd.@LoadPlugin[$pl_gw_index].Ping | sed 's/[:space:]/\n/'`
			do

			echo "`date` adding route and trying to ping remote server $ping_ip" >> $LG

			ip route add $ping_ip via $GW dev $IFACE table fabfi 
#			responses=`ping -c2 -s1 $ping_ip | sed 's/^.*=\([0-9]*\.[0-9]*\) ms/\1/' | 
#			  grep -oe "^[0-9]*\.[0-9]*$" | tr '\n\r' '\t'`
#			ip route del $ping_ip via $GW dev $IFACE table fabfi
#			if !(test "" = "$responses")
			ping -q -c2 -s1 $ping_ip
			if [ $? -eq 0 ] 
				then 
				ip route del $ping_ip via $GW dev $IFACE table fabfi
				echo "`date` successfully pinged $ping_ip" >> $LG

				if !(test "" = "$master_ip")
					then

					echo "`date` and this is a headnode" >> $LG

					set_server
				else

					echo "`date` but this is not a headnode" >> $LG

					clear_server
				fi
				#exit 0
			fi
			ip route del $ping_ip via $GW dev $IFACE table fabfi
		done

		echo "`date` w-get and ping failed, deleting default route on wan" >> $LG

		route del default $IFACE
	  	
	else

		echo "`date` wan is NOT listed as a default route" >> $LG

		if !(test "" = "$master_ip")
			then

			echo "`date` this is a headnode" >> $LG

			#note: policy routing in this script assumes iproute2, with this rule:
			#ip rule add iif lo table fabfi
			#and an entry for a table called "fabfi" at location that is evaluated first in /etc/iproute2/rt_tables
			#This script assumes that master.mesh is ALWAYS outside the network on the public internet
			ip route add $master_ip via $GW dev $IFACE table fabfi
			wget -s http://master.mesh
			if [ $? -eq 0 ]
				then
				ip route del $master_ip via $GW dev $IFACE table fabfi

				echo "`date` w-got master.mesh, adding default route" >> $LG

				route add default gw $GW $IFACE
				set_server
				#exit 0
			fi
			ip route del $master_ip via $GW dev $IFACE table fabfi

			echo "`date` failed to w-get master.mesh, checking ping in case of bad cloud server" >> $LG

		else
			if !(test "" = "$google_ip")
				then
	
				ip route add $google_ip via $GW dev $IFACE table fabfi
				wget -s http://${google_ip}
				if [ $? -eq 0 ]
					then
					ip route del $google_ip via $GW dev $IFACE table fabfi

					echo "`date` w-got google.com so adding default route, but we're not a headnode" >> $LG

					route add default gw $GW $IFACE
					clear_server
					#exit 0
				fi
				ip route del $google_ip via $GW dev $IFACE table fabfi
			fi

			echo "`date` failed to w-get google.com, checking ping in case of bad DNS" >> $LG

		fi

		# Check if dyn_gw IPs respond on the WAN by manually adding a route for them that way
		# This could be buggy in the case of only one dyn_gw IP?
		for ping_ip in `uci get olsrd.@LoadPlugin[$pl_gw_index].Ping | sed 's/[:space:]/\n/'`
			do

			echo "`date` adding route and trying to ping remote server $ping_ip" >> $LG

			ip route add $ping_ip via $GW dev $IFACE table fabfi 
#			responses=`ping -c2 -s1 $ping_ip | sed 's/^.*=\([0-9]*\.[0-9]*\) ms/\1/' | 
#			  grep -oe "^[0-9]*\.[0-9]*$" | tr '\n\r' '\t'`
#			ip route del $ping_ip via $GW dev $IFACE table fabfi
#			if !(test "" = "$responses")
			ping -q -c2 -s1 $ping_ip
			if [ $? -eq 0 ] 
				then 
				ip route del $ping_ip via $GW dev $IFACE table fabfi

				echo "`date` successfully pinged $ping_ip. Adding default route" >> $LG

				if !(test "" = "$master_ip")
					then

					echo "`date` and this is a headnode" >> $LG
					
					route add default gw $GW $IFACE
					set_server
				else

					echo "`date` but this is not a headnode" >> $LG

					route add default gw $GW $IFACE
					clear_server
				fi
				#exit 0
			fi
			ip route del $ping_ip via $GW dev $IFACE table fabfi
		done

		echo "`date` w-get and ping failed, no route changes will be made" >> $LG

	fi
fi
clear_server
}

######################
## Main Starts HERE ##
######################  
echo "" > $LG
if [ "$CU_DEFIFACE" = "" ]
	then
	export CU_DEFIFACE=`route -n | grep -m1 -e "^0\.0\.0\.0 .*" | sed 's/^0\.0\.0\.0.* \([a-zA-Z0-9\.]*\)$/\1/'`
	echo "`date` Initializing default interface variable to [${CU_DEFIFACE}]" >> $LG
else
	echo "`date` Got interface from last run [${CU_DEFIFACE}]" >> $LG
fi
do_main
#exit 0
